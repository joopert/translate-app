// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  Composable,
  TDataShape,
  Client,
} from '@hey-api/client-nuxt';
import type {
  AuthGetSignInGoogleData,
  AuthGetSignInGoogleResponse,
  AuthGetSignInGoogleError,
  AuthCallbackAuthCallbackGetData,
  AuthCallbackAuthCallbackGetError,
  AuthPostSignUpData,
  AuthPostSignUpResponse,
  AuthPostSignUpError,
  AuthPostConfirmSignUpData,
  AuthPostConfirmSignUpResponse,
  AuthPostConfirmSignUpError,
  AuthPostForgotPasswordData,
  AuthPostForgotPasswordResponse,
  AuthPostForgotPasswordError,
  AuthPostConfirmForgotPasswordData,
  AuthPostConfirmForgotPasswordResponse,
  AuthPostConfirmForgotPasswordError,
  AuthPostChangePasswordData,
  AuthPostChangePasswordResponse,
  AuthPostChangePasswordError,
  AuthPostSetInitialPasswordData,
  AuthPostSetInitialPasswordError,
  AuthGetMeData,
  AuthGetMeResponse,
  AuthPostSignInData,
  AuthPostSignInError,
  AuthPostRefreshData,
  AuthPostLogoutSessionData,
  AuthPostLogoutAllDevicesData,
  AuthGetProtectedData,
  PolarWebhookPaymentsWebhookPostData,
  PolarWebhookPaymentsWebhookPostResponse,
  PaymentsGetPlansData,
  PaymentsGetPlansResponse,
  PaymentsGetPlansRefreshData,
  PaymentsGetPlansRefreshResponse,
  PaymentsGetPlansRefreshError,
  PaymentsGetPlanData,
  PaymentsGetPlanResponse,
  PaymentsGetPlanError,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TComposable extends Composable,
  TData extends TDataShape = TDataShape,
  ResT = unknown,
  DefaultT = undefined,
> = ClientOptions<TComposable, TData, ResT, DefaultT> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Google sign-in
 * Google sign-in
 */
export const authGetSignInGoogle = <
  TComposable extends Composable,
  DefaultT extends AuthGetSignInGoogleResponse = AuthGetSignInGoogleResponse,
>(
  options: Options<TComposable, AuthGetSignInGoogleData, AuthGetSignInGoogleResponse, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    AuthGetSignInGoogleResponse | DefaultT,
    AuthGetSignInGoogleError,
    DefaultT
  >({
    url: '/auth/sign-in/google',
    ...options,
  });
};

/**
 * Auth Callback
 * Handle the OAuth callback from Cognito
 */
export const authCallbackAuthCallbackGet = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, AuthCallbackAuthCallbackGetData, unknown, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    unknown | DefaultT,
    AuthCallbackAuthCallbackGetError,
    DefaultT
  >({
    url: '/auth/callback',
    ...options,
  });
};

/**
 * Register a new user
 * Register a new user
 */
export const authPostSignUp = <
  TComposable extends Composable,
  DefaultT extends AuthPostSignUpResponse = AuthPostSignUpResponse,
>(
  options: Options<TComposable, AuthPostSignUpData, AuthPostSignUpResponse, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    AuthPostSignUpResponse | DefaultT,
    AuthPostSignUpError,
    DefaultT
  >({
    url: '/auth/sign-up',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Confirm user registration
 * Confirm user registration
 */
export const authPostConfirmSignUp = <
  TComposable extends Composable,
  DefaultT extends AuthPostConfirmSignUpResponse = AuthPostConfirmSignUpResponse,
>(
  options: Options<TComposable, AuthPostConfirmSignUpData, AuthPostConfirmSignUpResponse, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    AuthPostConfirmSignUpResponse | DefaultT,
    AuthPostConfirmSignUpError,
    DefaultT
  >({
    url: '/auth/confirm-sign-up',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Forgot password
 * Forgot password
 */
export const authPostForgotPassword = <
  TComposable extends Composable,
  DefaultT extends AuthPostForgotPasswordResponse = AuthPostForgotPasswordResponse,
>(
  options: Options<
    TComposable,
    AuthPostForgotPasswordData,
    AuthPostForgotPasswordResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    AuthPostForgotPasswordResponse | DefaultT,
    AuthPostForgotPasswordError,
    DefaultT
  >({
    url: '/auth/forgot-password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Confirm forgot password
 * Confirm forgot password
 */
export const authPostConfirmForgotPassword = <
  TComposable extends Composable,
  DefaultT extends AuthPostConfirmForgotPasswordResponse = AuthPostConfirmForgotPasswordResponse,
>(
  options: Options<
    TComposable,
    AuthPostConfirmForgotPasswordData,
    AuthPostConfirmForgotPasswordResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    AuthPostConfirmForgotPasswordResponse | DefaultT,
    AuthPostConfirmForgotPasswordError,
    DefaultT
  >({
    url: '/auth/confirm-forgot-password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Change password
 * Change password
 */
export const authPostChangePassword = <
  TComposable extends Composable,
  DefaultT extends AuthPostChangePasswordResponse = AuthPostChangePasswordResponse,
>(
  options: Options<
    TComposable,
    AuthPostChangePasswordData,
    AuthPostChangePasswordResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    AuthPostChangePasswordResponse | DefaultT,
    AuthPostChangePasswordError,
    DefaultT
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/change-password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Set initial password
 * Set initial password
 */
export const authPostSetInitialPassword = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, AuthPostSetInitialPasswordData, unknown, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    unknown | DefaultT,
    AuthPostSetInitialPasswordError,
    DefaultT
  >({
    url: '/auth/set-initial-password',
    ...options,
  });
};

/**
 * Get current user information
 * Get the current authenticated user's information
 */
export const authGetMe = <
  TComposable extends Composable,
  DefaultT extends AuthGetMeResponse = AuthGetMeResponse,
>(
  options: Options<TComposable, AuthGetMeData, AuthGetMeResponse, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    AuthGetMeResponse | DefaultT,
    unknown,
    DefaultT
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/me',
    ...options,
  });
};

/**
 * Authenticate user using JSON
 * Authenticate using username and password in JSON body to get access token
 */
export const authPostSignIn = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, AuthPostSignInData, unknown, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    unknown | DefaultT,
    AuthPostSignInError,
    DefaultT
  >({
    url: '/auth/sign-in',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Refresh access token using refresh token from cookie
 * Refresh access token using refresh token from cookie
 */
export const authPostRefresh = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, AuthPostRefreshData, unknown, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/auth/refresh',
      ...options,
    },
  );
};

/**
 * Logout from current device
 * Revoke refresh token for current device and clear cookies
 */
export const authPostLogoutSession = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, AuthPostLogoutSessionData, unknown, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      url: '/auth/logout/session',
      ...options,
    },
  );
};

/**
 * Logout from all devices
 * Revoke refresh token for all devices and clear cookies
 */
export const authPostLogoutAllDevices = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, AuthPostLogoutAllDevicesData, unknown, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, unknown, DefaultT>(
    {
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/auth/logout/all-devices',
      ...options,
    },
  );
};

/**
 * Protected route
 * Protected route
 */
export const authGetProtected = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, AuthGetProtectedData, unknown, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/protected',
    ...options,
  });
};

/**
 * Polar Webhook
 * Handle Polar webhook events
 *
 * Validates the signature, processes the event, and returns a success response
 */
export const polarWebhookPaymentsWebhookPost = <
  TComposable extends Composable,
  DefaultT extends
    PolarWebhookPaymentsWebhookPostResponse = PolarWebhookPaymentsWebhookPostResponse,
>(
  options: Options<
    TComposable,
    PolarWebhookPaymentsWebhookPostData,
    PolarWebhookPaymentsWebhookPostResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    PolarWebhookPaymentsWebhookPostResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/payments/webhook',
    ...options,
  });
};

/**
 * Get available subscription plans
 * Get available subscription plans
 */
export const paymentsGetPlans = <
  TComposable extends Composable,
  DefaultT extends PaymentsGetPlansResponse = PaymentsGetPlansResponse,
>(
  options: Options<TComposable, PaymentsGetPlansData, PaymentsGetPlansResponse, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    PaymentsGetPlansResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/payments/plans',
    ...options,
  });
};

/**
 * Refresh available subscription plans
 * Refresh available subscription plans
 */
export const paymentsGetPlansRefresh = <
  TComposable extends Composable,
  DefaultT extends PaymentsGetPlansRefreshResponse = PaymentsGetPlansRefreshResponse,
>(
  options: Options<
    TComposable,
    PaymentsGetPlansRefreshData,
    PaymentsGetPlansRefreshResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    PaymentsGetPlansRefreshResponse | DefaultT,
    PaymentsGetPlansRefreshError,
    DefaultT
  >({
    url: '/payments/plans/refresh',
    ...options,
  });
};

/**
 * Get details for a specific plan
 * Get details for a specific plan
 */
export const paymentsGetPlan = <
  TComposable extends Composable,
  DefaultT extends PaymentsGetPlanResponse = PaymentsGetPlanResponse,
>(
  options: Options<TComposable, PaymentsGetPlanData, PaymentsGetPlanResponse, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    PaymentsGetPlanResponse | DefaultT,
    PaymentsGetPlanError,
    DefaultT
  >({
    url: '/payments/plans/{plan_id}',
    ...options,
  });
};
