// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  Composable,
  TDataShape,
  Client,
} from "./client";
import type {
  AuthGetSignInGoogleOldData,
  AuthGetSignInGoogleOldResponse,
  AuthGetSignInGoogleOldError,
  AuthGetSignInGoogleData,
  AuthGetSignInGoogleResponse,
  AuthGetSignInGoogleError,
  AuthViaGoogleAuthCallbackGoogleGetData,
  AuthCallbackAuthCallbackGetData,
  AuthCallbackAuthCallbackGetError,
  AuthPostSignUpData,
  AuthPostSignUpResponse,
  AuthPostSignUpError,
  AuthPostConfirmSignUpData,
  AuthPostConfirmSignUpResponse,
  AuthPostConfirmSignUpError,
  AuthPostResendConfirmationCodeData,
  AuthPostResendConfirmationCodeResponse,
  AuthPostResendConfirmationCodeError,
  AuthPostForgotPasswordData,
  AuthPostForgotPasswordResponse,
  AuthPostForgotPasswordError,
  AuthPostConfirmForgotPasswordData,
  AuthPostConfirmForgotPasswordResponse,
  AuthPostConfirmForgotPasswordError,
  AuthPostChangePasswordData,
  AuthPostChangePasswordResponse,
  AuthPostChangePasswordError,
  AuthPostSetInitialPasswordData,
  AuthPostSetInitialPasswordError,
  AuthGetMeData,
  AuthGetMeResponse,
  AuthGetMeError,
  AuthPostSignInData,
  AuthPostSignInError,
  AuthPostRefreshData,
  AuthPostLogoutSessionData,
  AuthPostLogoutAllDevicesData,
  AuthPostLogoutAllDevicesError,
  GetCurrentUserAuthMe2GetData,
  GetMeTokenAuthMeTokenGetData,
  HealthGetHealthData,
  HealthGetHealthResponse,
  PolarWebhookPaymentsWebhookPostData,
  PolarWebhookPaymentsWebhookPostResponse,
  PaymentsGetPlansData,
  PaymentsGetPlansResponse,
  PaymentsGetPlansRefreshData,
  PaymentsGetPlansRefreshResponse,
  PaymentsGetPlansRefreshError,
  PaymentsGetPlanData,
  PaymentsGetPlanResponse,
  PaymentsGetPlanError,
  TranslateSitesGetSitesData,
  TranslateSitesGetSitesResponse,
  TranslateSitesGetSitesError,
  TranslateSitesPostSitesData,
  TranslateSitesPostSitesResponse,
  TranslateSitesPostSitesError,
  TranslateSitesDeleteSiteData,
  TranslateSitesDeleteSiteResponse,
  TranslateSitesDeleteSiteError,
  TranslateSitesGetSiteData,
  TranslateSitesGetSiteResponse,
  TranslateSitesGetSiteError,
  TranslateSitesPutSiteData,
  TranslateSitesPutSiteResponse,
  TranslateSitesPutSiteError,
  TranslateSitesPostToggleSiteData,
  TranslateSitesPostToggleSiteResponse,
  TranslateSitesPostToggleSiteError,
  DummyTranslateDummyPostData,
  DummyTranslateDummyPostResponse,
  ConfigGetButtonData,
  ConfigGetButtonResponse,
  ConfigGetButtonError,
  ConfigPutButtonData,
  ConfigPutButtonResponse,
  ConfigPutButtonError,
  ConfigGetDataSourcesData,
  ConfigGetDataSourcesResponse,
  ConfigGetDataSourcesError,
  ConfigPutDataSourcesData,
  ConfigPutDataSourcesResponse,
  ConfigPutDataSourcesError,
  GetProfilesData,
  GetProfilesResponse,
  GetProfilesError,
  PostProfileData,
  PostProfileResponse,
  PostProfileError,
  DeleteProfileData,
  DeleteProfileResponse,
  DeleteProfileError,
  GetProfileData,
  GetProfileResponse,
  GetProfileError,
  PutProfileData,
  PutProfileResponse,
  PutProfileError,
  GetWebsiteOverridesData,
  GetWebsiteOverridesResponse,
  PostWebsiteOverrideData,
  PostWebsiteOverrideResponse,
  PostWebsiteOverrideError,
  DeleteWebsiteOverrideData,
  DeleteWebsiteOverrideResponse,
  DeleteWebsiteOverrideError,
  GetWebsiteOverrideData,
  GetWebsiteOverrideResponse,
  GetWebsiteOverrideError,
  PutWebsiteOverrideData,
  PutWebsiteOverrideResponse,
  PutWebsiteOverrideError,
  ChatPostChatPublicData,
  ChatPostChatPublicResponse,
  ChatPostChatPublicError,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TComposable extends Composable,
  TData extends TDataShape = TDataShape,
  ResT = unknown,
  DefaultT = undefined,
> = ClientOptions<TComposable, TData, ResT, DefaultT> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Google sign-in
 * Google sign-in
 */
export const authGetSignInGoogleOld = <
  TComposable extends Composable,
  DefaultT extends
    AuthGetSignInGoogleOldResponse = AuthGetSignInGoogleOldResponse,
>(
  options: Options<
    TComposable,
    AuthGetSignInGoogleOldData,
    AuthGetSignInGoogleOldResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    AuthGetSignInGoogleOldResponse | DefaultT,
    AuthGetSignInGoogleOldError,
    DefaultT
  >({
    url: "/auth/sign-in/google-old",
    ...options,
  });
};

/**
 * Google sign-in
 * Google sign-in
 */
export const authGetSignInGoogle = <
  TComposable extends Composable,
  DefaultT extends AuthGetSignInGoogleResponse = AuthGetSignInGoogleResponse,
>(
  options: Options<
    TComposable,
    AuthGetSignInGoogleData,
    AuthGetSignInGoogleResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    AuthGetSignInGoogleResponse | DefaultT,
    AuthGetSignInGoogleError,
    DefaultT
  >({
    url: "/auth/sign-in/google",
    ...options,
  });
};

/**
 * Auth Via Google
 */
export const authViaGoogleAuthCallbackGoogleGet = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<
    TComposable,
    AuthViaGoogleAuthCallbackGoogleGetData,
    unknown,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: "/auth/callback/google",
    ...options,
  });
};

/**
 * Auth Callback
 * Handle the OAuth callback from Cognito
 */
export const authCallbackAuthCallbackGet = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<
    TComposable,
    AuthCallbackAuthCallbackGetData,
    unknown,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    unknown | DefaultT,
    AuthCallbackAuthCallbackGetError,
    DefaultT
  >({
    url: "/auth/callback",
    ...options,
  });
};

/**
 * Register a new user
 * Register a new user
 */
export const authPostSignUp = <
  TComposable extends Composable,
  DefaultT extends AuthPostSignUpResponse = AuthPostSignUpResponse,
>(
  options: Options<
    TComposable,
    AuthPostSignUpData,
    AuthPostSignUpResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    AuthPostSignUpResponse | DefaultT,
    AuthPostSignUpError,
    DefaultT
  >({
    url: "/auth/sign-up",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Confirm user registration
 * Confirm user registration
 */
export const authPostConfirmSignUp = <
  TComposable extends Composable,
  DefaultT extends
    AuthPostConfirmSignUpResponse = AuthPostConfirmSignUpResponse,
>(
  options: Options<
    TComposable,
    AuthPostConfirmSignUpData,
    AuthPostConfirmSignUpResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    AuthPostConfirmSignUpResponse | DefaultT,
    AuthPostConfirmSignUpError,
    DefaultT
  >({
    url: "/auth/confirm-sign-up",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Resend confirmation code
 * Resend confirmation code
 */
export const authPostResendConfirmationCode = <
  TComposable extends Composable,
  DefaultT extends
    AuthPostResendConfirmationCodeResponse = AuthPostResendConfirmationCodeResponse,
>(
  options: Options<
    TComposable,
    AuthPostResendConfirmationCodeData,
    AuthPostResendConfirmationCodeResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    AuthPostResendConfirmationCodeResponse | DefaultT,
    AuthPostResendConfirmationCodeError,
    DefaultT
  >({
    url: "/auth/resend-confirmation-code",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Forgot password
 * Forgot password
 */
export const authPostForgotPassword = <
  TComposable extends Composable,
  DefaultT extends
    AuthPostForgotPasswordResponse = AuthPostForgotPasswordResponse,
>(
  options: Options<
    TComposable,
    AuthPostForgotPasswordData,
    AuthPostForgotPasswordResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    AuthPostForgotPasswordResponse | DefaultT,
    AuthPostForgotPasswordError,
    DefaultT
  >({
    url: "/auth/forgot-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Confirm forgot password
 * Confirm forgot password
 */
export const authPostConfirmForgotPassword = <
  TComposable extends Composable,
  DefaultT extends
    AuthPostConfirmForgotPasswordResponse = AuthPostConfirmForgotPasswordResponse,
>(
  options: Options<
    TComposable,
    AuthPostConfirmForgotPasswordData,
    AuthPostConfirmForgotPasswordResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    AuthPostConfirmForgotPasswordResponse | DefaultT,
    AuthPostConfirmForgotPasswordError,
    DefaultT
  >({
    url: "/auth/confirm-forgot-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Change password
 * Change password
 */
export const authPostChangePassword = <
  TComposable extends Composable,
  DefaultT extends
    AuthPostChangePasswordResponse = AuthPostChangePasswordResponse,
>(
  options: Options<
    TComposable,
    AuthPostChangePasswordData,
    AuthPostChangePasswordResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    AuthPostChangePasswordResponse | DefaultT,
    AuthPostChangePasswordError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/change-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Set initial password
 * Set initial password
 */
export const authPostSetInitialPassword = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<
    TComposable,
    AuthPostSetInitialPasswordData,
    unknown,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    unknown | DefaultT,
    AuthPostSetInitialPasswordError,
    DefaultT
  >({
    url: "/auth/set-initial-password",
    ...options,
  });
};

/**
 * Get current user information
 * Get the current authenticated user's information
 */
export const authGetMe = <
  TComposable extends Composable,
  DefaultT extends AuthGetMeResponse = AuthGetMeResponse,
>(
  options: Options<TComposable, AuthGetMeData, AuthGetMeResponse, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    AuthGetMeResponse | DefaultT,
    AuthGetMeError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/me",
    ...options,
  });
};

/**
 * Authenticate user using JSON
 * Authenticate using username and password in JSON body to get access token
 */
export const authPostSignIn = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<TComposable, AuthPostSignInData, unknown, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    unknown | DefaultT,
    AuthPostSignInError,
    DefaultT
  >({
    url: "/auth/sign-in",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Refresh access token using refresh token from cookie
 * Refresh access token using refresh token from cookie
 */
export const authPostRefresh = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<TComposable, AuthPostRefreshData, unknown, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: "/auth/refresh",
    ...options,
  });
};

/**
 * Logout from current device
 * Revoke refresh token for current device and clear cookies
 */
export const authPostLogoutSession = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<TComposable, AuthPostLogoutSessionData, unknown, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: "/auth/logout/session",
    ...options,
  });
};

/**
 * Logout from all devices
 * Revoke refresh token for all devices and clear cookies
 */
export const authPostLogoutAllDevices = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<
    TComposable,
    AuthPostLogoutAllDevicesData,
    unknown,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    unknown | DefaultT,
    AuthPostLogoutAllDevicesError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/logout/all-devices",
    ...options,
  });
};

/**
 * Get Current User
 */
export const getCurrentUserAuthMe2Get = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<
    TComposable,
    GetCurrentUserAuthMe2GetData,
    unknown,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: "/auth/me2",
    ...options,
  });
};

/**
 * Get Me Token
 */
export const getMeTokenAuthMeTokenGet = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<
    TComposable,
    GetMeTokenAuthMeTokenGetData,
    unknown,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: "/auth/me/token",
    ...options,
  });
};

/**
 * Health check
 * Health check
 */
export const healthGetHealth = <
  TComposable extends Composable,
  DefaultT extends HealthGetHealthResponse = HealthGetHealthResponse,
>(
  options: Options<
    TComposable,
    HealthGetHealthData,
    HealthGetHealthResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    HealthGetHealthResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: "/health/",
    ...options,
  });
};

/**
 * Polar Webhook
 * Handle Polar webhook events
 *
 * Validates the signature, processes the event, and returns a success response
 */
export const polarWebhookPaymentsWebhookPost = <
  TComposable extends Composable,
  DefaultT extends
    PolarWebhookPaymentsWebhookPostResponse = PolarWebhookPaymentsWebhookPostResponse,
>(
  options: Options<
    TComposable,
    PolarWebhookPaymentsWebhookPostData,
    PolarWebhookPaymentsWebhookPostResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    PolarWebhookPaymentsWebhookPostResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: "/payments/webhook",
    ...options,
  });
};

/**
 * Get available subscription plans
 * Get available subscription plans
 */
export const paymentsGetPlans = <
  TComposable extends Composable,
  DefaultT extends PaymentsGetPlansResponse = PaymentsGetPlansResponse,
>(
  options: Options<
    TComposable,
    PaymentsGetPlansData,
    PaymentsGetPlansResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    PaymentsGetPlansResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: "/payments/plans",
    ...options,
  });
};

/**
 * Refresh available subscription plans
 * Refresh available subscription plans
 */
export const paymentsGetPlansRefresh = <
  TComposable extends Composable,
  DefaultT extends
    PaymentsGetPlansRefreshResponse = PaymentsGetPlansRefreshResponse,
>(
  options: Options<
    TComposable,
    PaymentsGetPlansRefreshData,
    PaymentsGetPlansRefreshResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    PaymentsGetPlansRefreshResponse | DefaultT,
    PaymentsGetPlansRefreshError,
    DefaultT
  >({
    url: "/payments/plans/refresh",
    ...options,
  });
};

/**
 * Get details for a specific plan
 * Get details for a specific plan
 */
export const paymentsGetPlan = <
  TComposable extends Composable,
  DefaultT extends PaymentsGetPlanResponse = PaymentsGetPlanResponse,
>(
  options: Options<
    TComposable,
    PaymentsGetPlanData,
    PaymentsGetPlanResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    PaymentsGetPlanResponse | DefaultT,
    PaymentsGetPlanError,
    DefaultT
  >({
    url: "/payments/plans/{plan_id}",
    ...options,
  });
};

/**
 * Get sites
 * Get sites
 */
export const translateSitesGetSites = <
  TComposable extends Composable,
  DefaultT extends
    TranslateSitesGetSitesResponse = TranslateSitesGetSitesResponse,
>(
  options: Options<
    TComposable,
    TranslateSitesGetSitesData,
    TranslateSitesGetSitesResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    TranslateSitesGetSitesResponse | DefaultT,
    TranslateSitesGetSitesError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/translate/sites",
    ...options,
  });
};

/**
 * Create site
 * Create site
 */
export const translateSitesPostSites = <
  TComposable extends Composable,
  DefaultT extends
    TranslateSitesPostSitesResponse = TranslateSitesPostSitesResponse,
>(
  options: Options<
    TComposable,
    TranslateSitesPostSitesData,
    TranslateSitesPostSitesResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    TranslateSitesPostSitesResponse | DefaultT,
    TranslateSitesPostSitesError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/translate/sites",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete site
 * Delete site
 */
export const translateSitesDeleteSite = <
  TComposable extends Composable,
  DefaultT extends
    TranslateSitesDeleteSiteResponse = TranslateSitesDeleteSiteResponse,
>(
  options: Options<
    TComposable,
    TranslateSitesDeleteSiteData,
    TranslateSitesDeleteSiteResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    TComposable,
    TranslateSitesDeleteSiteResponse | DefaultT,
    TranslateSitesDeleteSiteError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/translate/sites/{site_id}",
    ...options,
  });
};

/**
 * Get site
 * Get site
 */
export const translateSitesGetSite = <
  TComposable extends Composable,
  DefaultT extends
    TranslateSitesGetSiteResponse = TranslateSitesGetSiteResponse,
>(
  options: Options<
    TComposable,
    TranslateSitesGetSiteData,
    TranslateSitesGetSiteResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    TranslateSitesGetSiteResponse | DefaultT,
    TranslateSitesGetSiteError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/translate/sites/{site_id}",
    ...options,
  });
};

/**
 * Update site
 * Update site
 */
export const translateSitesPutSite = <
  TComposable extends Composable,
  DefaultT extends
    TranslateSitesPutSiteResponse = TranslateSitesPutSiteResponse,
>(
  options: Options<
    TComposable,
    TranslateSitesPutSiteData,
    TranslateSitesPutSiteResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    TComposable,
    TranslateSitesPutSiteResponse | DefaultT,
    TranslateSitesPutSiteError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/translate/sites/{site_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Toggle site
 * Toggle site
 */
export const translateSitesPostToggleSite = <
  TComposable extends Composable,
  DefaultT extends
    TranslateSitesPostToggleSiteResponse = TranslateSitesPostToggleSiteResponse,
>(
  options: Options<
    TComposable,
    TranslateSitesPostToggleSiteData,
    TranslateSitesPostToggleSiteResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    TranslateSitesPostToggleSiteResponse | DefaultT,
    TranslateSitesPostToggleSiteError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/translate/sites/{site_id}/toggle",
    ...options,
  });
};

/**
 * Dummy
 * Toggle a site's active status
 */
export const dummyTranslateDummyPost = <
  TComposable extends Composable,
  DefaultT extends
    DummyTranslateDummyPostResponse = DummyTranslateDummyPostResponse,
>(
  options: Options<
    TComposable,
    DummyTranslateDummyPostData,
    DummyTranslateDummyPostResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    DummyTranslateDummyPostResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: "/translate/dummy",
    ...options,
  });
};

/**
 * Get button configuration
 * Get button configuration
 */
export const configGetButton = <
  TComposable extends Composable,
  DefaultT extends ConfigGetButtonResponse = ConfigGetButtonResponse,
>(
  options: Options<
    TComposable,
    ConfigGetButtonData,
    ConfigGetButtonResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    ConfigGetButtonResponse | DefaultT,
    ConfigGetButtonError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/config/{domain}/button",
    ...options,
  });
};

/**
 * Update button configuration
 * Update button configuration
 */
export const configPutButton = <
  TComposable extends Composable,
  DefaultT extends ConfigPutButtonResponse = ConfigPutButtonResponse,
>(
  options: Options<
    TComposable,
    ConfigPutButtonData,
    ConfigPutButtonResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    TComposable,
    ConfigPutButtonResponse | DefaultT,
    ConfigPutButtonError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/config/{domain}/button",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get data sources configuration
 * Get data sources configuration
 */
export const configGetDataSources = <
  TComposable extends Composable,
  DefaultT extends ConfigGetDataSourcesResponse = ConfigGetDataSourcesResponse,
>(
  options: Options<
    TComposable,
    ConfigGetDataSourcesData,
    ConfigGetDataSourcesResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    ConfigGetDataSourcesResponse | DefaultT,
    ConfigGetDataSourcesError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/config/{domain}/data_sources",
    ...options,
  });
};

/**
 * Update data sources configuration
 * Update data sources configuration
 */
export const configPutDataSources = <
  TComposable extends Composable,
  DefaultT extends ConfigPutDataSourcesResponse = ConfigPutDataSourcesResponse,
>(
  options: Options<
    TComposable,
    ConfigPutDataSourcesData,
    ConfigPutDataSourcesResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    TComposable,
    ConfigPutDataSourcesResponse | DefaultT,
    ConfigPutDataSourcesError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/config/{domain}/data_sources",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get profiles
 * Get profiles
 */
export const getProfiles = <
  TComposable extends Composable,
  DefaultT extends GetProfilesResponse = GetProfilesResponse,
>(
  options: Options<TComposable, GetProfilesData, GetProfilesResponse, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    GetProfilesResponse | DefaultT,
    GetProfilesError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/simplify/profiles",
    ...options,
  });
};

/**
 * Post profile
 * Post profile
 */
export const postProfile = <
  TComposable extends Composable,
  DefaultT extends PostProfileResponse = PostProfileResponse,
>(
  options: Options<TComposable, PostProfileData, PostProfileResponse, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    PostProfileResponse | DefaultT,
    PostProfileError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/simplify/profiles",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete profile
 * Delete profile
 */
export const deleteProfile = <
  TComposable extends Composable,
  DefaultT extends DeleteProfileResponse = DeleteProfileResponse,
>(
  options: Options<
    TComposable,
    DeleteProfileData,
    DeleteProfileResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    TComposable,
    DeleteProfileResponse | DefaultT,
    DeleteProfileError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/simplify/profiles/{name}",
    ...options,
  });
};

/**
 * Get profile
 * Get profile
 */
export const getProfile = <
  TComposable extends Composable,
  DefaultT extends GetProfileResponse = GetProfileResponse,
>(
  options: Options<TComposable, GetProfileData, GetProfileResponse, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    GetProfileResponse | DefaultT,
    GetProfileError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/simplify/profiles/{name}",
    ...options,
  });
};

/**
 * Put profile
 * Put profile
 */
export const putProfile = <
  TComposable extends Composable,
  DefaultT extends PutProfileResponse = PutProfileResponse,
>(
  options: Options<TComposable, PutProfileData, PutProfileResponse, DefaultT>,
) => {
  return (options.client ?? _heyApiClient).put<
    TComposable,
    PutProfileResponse | DefaultT,
    PutProfileError,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/simplify/profiles/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get website overrides
 * Get website overrides
 */
export const getWebsiteOverrides = <
  TComposable extends Composable,
  DefaultT extends GetWebsiteOverridesResponse = GetWebsiteOverridesResponse,
>(
  options: Options<
    TComposable,
    GetWebsiteOverridesData,
    GetWebsiteOverridesResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    GetWebsiteOverridesResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: "/simplify/website_overrides",
    ...options,
  });
};

/**
 * Post website override
 * Post website override
 */
export const postWebsiteOverride = <
  TComposable extends Composable,
  DefaultT extends PostWebsiteOverrideResponse = PostWebsiteOverrideResponse,
>(
  options: Options<
    TComposable,
    PostWebsiteOverrideData,
    PostWebsiteOverrideResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    PostWebsiteOverrideResponse | DefaultT,
    PostWebsiteOverrideError,
    DefaultT
  >({
    url: "/simplify/website_overrides",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete website override
 * Delete website override
 */
export const deleteWebsiteOverride = <
  TComposable extends Composable,
  DefaultT extends
    DeleteWebsiteOverrideResponse = DeleteWebsiteOverrideResponse,
>(
  options: Options<
    TComposable,
    DeleteWebsiteOverrideData,
    DeleteWebsiteOverrideResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    TComposable,
    DeleteWebsiteOverrideResponse | DefaultT,
    DeleteWebsiteOverrideError,
    DefaultT
  >({
    url: "/simplify/website_overrides/{domain}",
    ...options,
  });
};

/**
 * Get website override
 * Get website override
 */
export const getWebsiteOverride = <
  TComposable extends Composable,
  DefaultT extends GetWebsiteOverrideResponse = GetWebsiteOverrideResponse,
>(
  options: Options<
    TComposable,
    GetWebsiteOverrideData,
    GetWebsiteOverrideResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    GetWebsiteOverrideResponse | DefaultT,
    GetWebsiteOverrideError,
    DefaultT
  >({
    url: "/simplify/website_overrides/{domain}",
    ...options,
  });
};

/**
 * Put website override
 * Put website override
 */
export const putWebsiteOverride = <
  TComposable extends Composable,
  DefaultT extends PutWebsiteOverrideResponse = PutWebsiteOverrideResponse,
>(
  options: Options<
    TComposable,
    PutWebsiteOverrideData,
    PutWebsiteOverrideResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    TComposable,
    PutWebsiteOverrideResponse | DefaultT,
    PutWebsiteOverrideError,
    DefaultT
  >({
    url: "/simplify/website_overrides/{domain}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Chat Public
 * Chat Public.
 */
export const chatPostChatPublic = <
  TComposable extends Composable,
  DefaultT extends ChatPostChatPublicResponse = ChatPostChatPublicResponse,
>(
  options: Options<
    TComposable,
    ChatPostChatPublicData,
    ChatPostChatPublicResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    ChatPostChatPublicResponse | DefaultT,
    ChatPostChatPublicError,
    DefaultT
  >({
    url: "/simplify/chat/public",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};
