// This file is auto-generated by @hey-api/openapi-ts

/**
 * AbTestingLabel
 */
export type AbTestingLabel = {
  /**
   * Type
   */
  type: 'abTesting';
  /**
   * Variants
   */
  variants: Array<string>;
};

/**
 * ButtonConfig
 */
export type ButtonConfig = {
  /**
   * Label
   */
  label:
    | ({
        type: 'hardcoded';
      } & HardcodedLabel)
    | ({
        type: 'contextual';
      } & ContextualLabel)
    | ({
        type: 'abTesting';
      } & AbTestingLabel);
  position: ButtonPosition;
};

/**
 * ButtonPosition
 */
export type ButtonPosition = {
  /**
   * Horizontal
   */
  horizontal: 'left' | 'center' | 'right';
  /**
   * Vertical
   */
  vertical: 'top' | 'bottom';
  /**
   * Offsetx
   */
  offsetX: string;
  /**
   * Offsety
   */
  offsetY: string;
};

/**
 * ButtonSettings
 * Button settings model for storing button configuration
 */
export type ButtonSettings = {
  /**
   * Id
   * MongoDB document ObjectID
   */
  _id?: string | null;
  data: ButtonConfig;
  /**
   * Domain
   */
  domain?: string | null;
};

/**
 * ChangePassword
 */
export type ChangePassword = {
  /**
   * Old Password
   */
  old_password: string;
  /**
   * New Password
   */
  new_password: string;
};

/**
 * ChatRequest
 */
export type ChatRequest = {
  /**
   * Conversation Id
   */
  conversation_id: string;
  /**
   * Message Id
   */
  message_id: string;
  /**
   * Message
   */
  message: string;
  config: Config;
};

/**
 * ChatResponse
 */
export type ChatResponse = {
  /**
   * Conversation Id
   */
  conversation_id: string;
  message: FrontendMessage;
};

/**
 * Config
 */
export type Config = {
  /**
   * The user's familiarity level with the topic.
   */
  familiarity?: FamiliarityLevel | null;
  /**
   * Background
   * The user's background or prior knowledge.
   */
  background?: string | null;
  /**
   * Context
   * Add specific context or scenario for the interaction.
   */
  context?: string | null;
  /**
   * Strict Adherence
   * Whether the AI should strictly adhere to the provided page content.
   */
  strict_adherence?: boolean | null;
  /**
   * Summary
   * Whether a summary of the information is required.
   */
  summary?: boolean | null;
  /**
   * Purpose
   * The primary purpose or goal of the user's interaction.
   */
  purpose?: string | null;
  /**
   * The user's preferred learning style.
   */
  learning_style?: LearningStyle | null;
};

/**
 * ConfirmForgotPassword
 */
export type ConfirmForgotPassword = {
  /**
   * Email
   */
  email: string;
  /**
   * Confirmation Code
   */
  confirmation_code: string;
  /**
   * New Password
   */
  new_password: string;
};

/**
 * ConfirmSignUp
 */
export type ConfirmSignUp = {
  /**
   * Email
   */
  email: string;
  /**
   * Confirmation Code
   */
  confirmation_code: string;
};

/**
 * ContextualLabel
 */
export type ContextualLabel = {
  /**
   * Type
   */
  type: 'contextual';
  /**
   * Fallbacklabel
   */
  fallbackLabel: string;
};

/**
 * CurrentUser
 */
export type CurrentUser = {
  /**
   * Id
   */
  id: string;
  /**
   * Username
   */
  username: string;
  /**
   * Email
   */
  email: string;
  /**
   * Email Is Verified
   */
  email_is_verified?: boolean | null;
  /**
   * Groups
   */
  groups?: Array<string>;
  /**
   * Picture
   */
  picture?: string | null;
  /**
   * First Name
   */
  first_name?: string | null;
  /**
   * Last Name
   */
  last_name?: string | null;
  /**
   * Phone Number
   */
  phone_number?: string | null;
  /**
   * Phone Number Is Verified
   */
  phone_number_is_verified?: boolean | null;
};

/**
 * DataSourcesConfig
 */
export type DataSourcesConfig = {
  /**
   * Page Content
   */
  page_content?: boolean;
  /**
   * Page Url
   * Include page URL in data sources
   */
  page_url?: boolean;
  /**
   * Page Title
   */
  page_title?: boolean;
  /**
   * Ai General Knowledge
   */
  ai_general_knowledge?: boolean;
};

/**
 * DataSourcesSettings
 * Data sources settings model for storing data sources configuration
 */
export type DataSourcesSettings = {
  /**
   * Id
   * MongoDB document ObjectID
   */
  _id?: string | null;
  data: DataSourcesConfig;
  /**
   * Domain
   */
  domain?: string | null;
};

/**
 * Detail
 */
export type Detail = {
  /**
   * Loc
   */
  loc: Array<ErrorLocation | string> | ErrorLocationField;
  /**
   * Msg
   */
  msg: string;
  /**
   * Code
   */
  code: string;
};

/**
 * ErrorLocation
 */
export type ErrorLocation = 'body' | 'query' | 'header' | 'cookies' | 'params';

/**
 * ErrorLocationField
 */
export type ErrorLocationField = 'general';

/**
 * FamiliarityLevel
 */
export type FamiliarityLevel = 'beginner' | 'intermediate' | 'advanced';

/**
 * ForgotPassword
 */
export type ForgotPassword = {
  /**
   * Email
   */
  email: string;
};

/**
 * FrontendMessage
 */
export type FrontendMessage = {
  /**
   * Id
   */
  id: string;
  /**
   * Kind
   */
  kind: 'request' | 'response';
  /**
   * Content
   */
  content: string;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
  /**
   * Detail
   */
  detail?: Array<ValidationError>;
};

/**
 * HardcodedLabel
 */
export type HardcodedLabel = {
  /**
   * Type
   */
  type: 'hardcoded';
  /**
   * Value
   */
  value: string;
};

/**
 * Health
 */
export type Health = {
  /**
   * Status
   */
  status?: 'OK' | 'ERROR';
  /**
   * Timestamp
   * UTC timestamp in ISO 8601 format
   */
  timestamp: string;
};

/**
 * LearningStyle
 */
export type LearningStyle = 'no preference' | 'visual' | 'analogies';

/**
 * OAuthUrl
 */
export type OAuthUrl = {
  /**
   * Url
   */
  url: string;
};

/**
 * Plan
 * Plan model.
 */
export type Plan = {
  /**
   * Id
   */
  id: string;
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description?: string | null;
};

/**
 * Plans
 * Collection of plans.
 */
export type Plans = {
  /**
   * Items
   */
  items: Array<Plan>;
};

/**
 * Profile
 */
export type Profile = {
  /**
   * Name
   * Display name for the profile
   */
  name: string;
  config: Config;
  /**
   * Id
   * MongoDB document ObjectID
   */
  _id?: string | null;
  /**
   * Created At
   */
  created_at?: string;
  /**
   * Updated At
   */
  updated_at?: string;
};

/**
 * ProfileIn
 */
export type ProfileIn = {
  /**
   * Name
   * Display name for the profile
   */
  name: string;
  config: Config;
};

/**
 * ResendConfirmationCode
 */
export type ResendConfirmationCode = {
  /**
   * Email
   */
  email: string;
};

/**
 * ResponseFormat
 */
export type ResponseFormat = {
  /**
   * Code
   */
  code: string;
  /**
   * Msg
   */
  msg: string;
};

/**
 * SignIn
 */
export type SignIn = {
  /**
   * Username
   */
  username: string;
  /**
   * Password
   */
  password: string;
};

/**
 * SignUp
 */
export type SignUp = {
  /**
   * Email
   */
  email: string;
  /**
   * Password
   */
  password: string;
};

/**
 * Site
 * Site model for storing registered domains and their siteIds
 */
export type Site = {
  /**
   * Id
   * MongoDB document ObjectID
   */
  _id?: string | null;
  /**
   * Domain
   */
  domain: string;
  /**
   * Site Id
   */
  site_id: string;
  /**
   * Owner Id
   */
  owner_id: string;
  /**
   * Active
   */
  active?: boolean;
};

/**
 * SiteCreate
 * Site creation model
 */
export type SiteCreate = {
  /**
   * Domain
   * Domain name (without http/https)
   */
  domain: string;
  /**
   * Site Id
   * Custom site ID (generated if not provided)
   */
  site_id?: string | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
  /**
   * Location
   */
  loc: Array<string | number>;
  /**
   * Message
   */
  msg: string;
  /**
   * Error Type
   */
  type: string;
};

/**
 * WebsiteOverride
 */
export type WebsiteOverride = {
  /**
   * Domain
   * Website domain (e.g., 'stackoverflow.com')
   */
  domain: string;
  /**
   * Profile Id
   * Base profile ID
   */
  profile_id?: string | null;
  /**
   * Specific overrides for this website
   */
  config: Config;
  /**
   * Id
   * MongoDB document ObjectID
   */
  _id?: string | null;
  /**
   * Created At
   */
  created_at?: string;
  /**
   * Updated At
   */
  updated_at?: string;
};

/**
 * WebsiteOverrideCreate
 */
export type WebsiteOverrideCreate = {
  /**
   * Domain
   * Website domain (e.g., 'stackoverflow.com')
   */
  domain: string;
  /**
   * Profile Id
   * Base profile ID
   */
  profile_id?: string | null;
  /**
   * Specific overrides for this website
   */
  config: Config;
};

export type AuthGetSignInGoogleOldData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Redirect
     * URL to redirect to after successful authentication
     */
    redirect?: string | null;
  };
  url: '/auth/sign-in/google-old';
};

export type AuthGetSignInGoogleOldErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthGetSignInGoogleOldError =
  AuthGetSignInGoogleOldErrors[keyof AuthGetSignInGoogleOldErrors];

export type AuthGetSignInGoogleOldResponses = {
  /**
   * Successful Response
   */
  200: OAuthUrl;
};

export type AuthGetSignInGoogleOldResponse =
  AuthGetSignInGoogleOldResponses[keyof AuthGetSignInGoogleOldResponses];

export type AuthGetSignInGoogleData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Redirect
     * URL to redirect to after successful authentication
     */
    redirect?: string | null;
  };
  url: '/auth/sign-in/google';
};

export type AuthGetSignInGoogleErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthGetSignInGoogleError = AuthGetSignInGoogleErrors[keyof AuthGetSignInGoogleErrors];

export type AuthGetSignInGoogleResponses = {
  /**
   * Response Auth Get Sign In Google
   * Successful Response
   */
  200: string;
};

export type AuthGetSignInGoogleResponse =
  AuthGetSignInGoogleResponses[keyof AuthGetSignInGoogleResponses];

export type AuthViaGoogleAuthCallbackGoogleGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/callback/google';
};

export type AuthViaGoogleAuthCallbackGoogleGetResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type AuthCallbackAuthCallbackGetData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Code
     */
    code: string;
    /**
     * State
     */
    state: string;
  };
  url: '/auth/callback';
};

export type AuthCallbackAuthCallbackGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthCallbackAuthCallbackGetError =
  AuthCallbackAuthCallbackGetErrors[keyof AuthCallbackAuthCallbackGetErrors];

export type AuthCallbackAuthCallbackGetResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type AuthPostSignUpData = {
  body: SignUp;
  path?: never;
  query?: never;
  url: '/auth/sign-up';
};

export type AuthPostSignUpErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthPostSignUpError = AuthPostSignUpErrors[keyof AuthPostSignUpErrors];

export type AuthPostSignUpResponses = {
  /**
   * Successful Response
   */
  200: ResponseFormat;
};

export type AuthPostSignUpResponse = AuthPostSignUpResponses[keyof AuthPostSignUpResponses];

export type AuthPostConfirmSignUpData = {
  body: ConfirmSignUp;
  path?: never;
  query?: never;
  url: '/auth/confirm-sign-up';
};

export type AuthPostConfirmSignUpErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthPostConfirmSignUpError =
  AuthPostConfirmSignUpErrors[keyof AuthPostConfirmSignUpErrors];

export type AuthPostConfirmSignUpResponses = {
  /**
   * Successful Response
   */
  200: ResponseFormat;
};

export type AuthPostConfirmSignUpResponse =
  AuthPostConfirmSignUpResponses[keyof AuthPostConfirmSignUpResponses];

export type AuthPostResendConfirmationCodeData = {
  body: ResendConfirmationCode;
  path?: never;
  query?: never;
  url: '/auth/resend-confirmation-code';
};

export type AuthPostResendConfirmationCodeErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthPostResendConfirmationCodeError =
  AuthPostResendConfirmationCodeErrors[keyof AuthPostResendConfirmationCodeErrors];

export type AuthPostResendConfirmationCodeResponses = {
  /**
   * Successful Response
   */
  200: ResponseFormat;
};

export type AuthPostResendConfirmationCodeResponse =
  AuthPostResendConfirmationCodeResponses[keyof AuthPostResendConfirmationCodeResponses];

export type AuthPostForgotPasswordData = {
  body: ForgotPassword;
  path?: never;
  query?: never;
  url: '/auth/forgot-password';
};

export type AuthPostForgotPasswordErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthPostForgotPasswordError =
  AuthPostForgotPasswordErrors[keyof AuthPostForgotPasswordErrors];

export type AuthPostForgotPasswordResponses = {
  /**
   * Successful Response
   */
  200: ResponseFormat;
};

export type AuthPostForgotPasswordResponse =
  AuthPostForgotPasswordResponses[keyof AuthPostForgotPasswordResponses];

export type AuthPostConfirmForgotPasswordData = {
  body: ConfirmForgotPassword;
  path?: never;
  query?: never;
  url: '/auth/confirm-forgot-password';
};

export type AuthPostConfirmForgotPasswordErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthPostConfirmForgotPasswordError =
  AuthPostConfirmForgotPasswordErrors[keyof AuthPostConfirmForgotPasswordErrors];

export type AuthPostConfirmForgotPasswordResponses = {
  /**
   * Successful Response
   */
  200: ResponseFormat;
};

export type AuthPostConfirmForgotPasswordResponse =
  AuthPostConfirmForgotPasswordResponses[keyof AuthPostConfirmForgotPasswordResponses];

export type AuthPostChangePasswordData = {
  body: ChangePassword;
  path?: never;
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/auth/change-password';
};

export type AuthPostChangePasswordErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthPostChangePasswordError =
  AuthPostChangePasswordErrors[keyof AuthPostChangePasswordErrors];

export type AuthPostChangePasswordResponses = {
  /**
   * Successful Response
   */
  200: ResponseFormat;
};

export type AuthPostChangePasswordResponse =
  AuthPostChangePasswordResponses[keyof AuthPostChangePasswordResponses];

export type AuthPostSetInitialPasswordData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Username
     */
    username: string;
    /**
     * Old Password
     */
    old_password: string;
    /**
     * New Password
     */
    new_password: string;
  };
  url: '/auth/set-initial-password';
};

export type AuthPostSetInitialPasswordErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthPostSetInitialPasswordError =
  AuthPostSetInitialPasswordErrors[keyof AuthPostSetInitialPasswordErrors];

export type AuthPostSetInitialPasswordResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type AuthGetMeData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/auth/me';
};

export type AuthGetMeErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthGetMeError = AuthGetMeErrors[keyof AuthGetMeErrors];

export type AuthGetMeResponses = {
  /**
   * Successful Response
   */
  200: CurrentUser;
};

export type AuthGetMeResponse = AuthGetMeResponses[keyof AuthGetMeResponses];

export type AuthPostSignInData = {
  body: SignIn;
  path?: never;
  query?: never;
  url: '/auth/sign-in';
};

export type AuthPostSignInErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthPostSignInError = AuthPostSignInErrors[keyof AuthPostSignInErrors];

export type AuthPostSignInResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type AuthPostRefreshData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/refresh';
};

export type AuthPostRefreshResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type AuthPostLogoutSessionData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/logout/session';
};

export type AuthPostLogoutSessionResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type AuthPostLogoutAllDevicesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/auth/logout/all-devices';
};

export type AuthPostLogoutAllDevicesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthPostLogoutAllDevicesError =
  AuthPostLogoutAllDevicesErrors[keyof AuthPostLogoutAllDevicesErrors];

export type AuthPostLogoutAllDevicesResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type GetCurrentUserAuthMe2GetData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/me2';
};

export type GetCurrentUserAuthMe2GetResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type GetMeTokenAuthMeTokenGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/me/token';
};

export type GetMeTokenAuthMeTokenGetResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type HealthGetHealthData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/health/';
};

export type HealthGetHealthResponses = {
  /**
   * Successful Response
   */
  200: Health;
};

export type HealthGetHealthResponse = HealthGetHealthResponses[keyof HealthGetHealthResponses];

export type PolarWebhookPaymentsWebhookPostData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/payments/webhook';
};

export type PolarWebhookPaymentsWebhookPostResponses = {
  /**
   * Response Polar Webhook Payments Webhook Post
   * Successful Response
   */
  200: {
    [key: string]: unknown;
  };
};

export type PolarWebhookPaymentsWebhookPostResponse =
  PolarWebhookPaymentsWebhookPostResponses[keyof PolarWebhookPaymentsWebhookPostResponses];

export type PaymentsGetPlansData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/payments/plans';
};

export type PaymentsGetPlansResponses = {
  /**
   * Successful Response
   */
  200: Plans;
};

export type PaymentsGetPlansResponse = PaymentsGetPlansResponses[keyof PaymentsGetPlansResponses];

export type PaymentsGetPlansRefreshData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Force
     */
    force?: boolean;
  };
  url: '/payments/plans/refresh';
};

export type PaymentsGetPlansRefreshErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type PaymentsGetPlansRefreshError =
  PaymentsGetPlansRefreshErrors[keyof PaymentsGetPlansRefreshErrors];

export type PaymentsGetPlansRefreshResponses = {
  /**
   * Successful Response
   */
  200: Plans;
};

export type PaymentsGetPlansRefreshResponse =
  PaymentsGetPlansRefreshResponses[keyof PaymentsGetPlansRefreshResponses];

export type PaymentsGetPlanData = {
  body?: never;
  path: {
    /**
     * Plan Id
     */
    plan_id: string;
  };
  query?: never;
  url: '/payments/plans/{plan_id}';
};

export type PaymentsGetPlanErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type PaymentsGetPlanError = PaymentsGetPlanErrors[keyof PaymentsGetPlanErrors];

export type PaymentsGetPlanResponses = {
  /**
   * Successful Response
   */
  200: Plan;
};

export type PaymentsGetPlanResponse = PaymentsGetPlanResponses[keyof PaymentsGetPlanResponses];

export type TranslateSitesGetSitesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/translate/sites';
};

export type TranslateSitesGetSitesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TranslateSitesGetSitesError =
  TranslateSitesGetSitesErrors[keyof TranslateSitesGetSitesErrors];

export type TranslateSitesGetSitesResponses = {
  /**
   * Response Translate Sites Get Sites
   * Successful Response
   */
  200: Array<Site>;
};

export type TranslateSitesGetSitesResponse =
  TranslateSitesGetSitesResponses[keyof TranslateSitesGetSitesResponses];

export type TranslateSitesPostSitesData = {
  body: SiteCreate;
  path?: never;
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/translate/sites';
};

export type TranslateSitesPostSitesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TranslateSitesPostSitesError =
  TranslateSitesPostSitesErrors[keyof TranslateSitesPostSitesErrors];

export type TranslateSitesPostSitesResponses = {
  /**
   * Successful Response
   */
  201: Site;
};

export type TranslateSitesPostSitesResponse =
  TranslateSitesPostSitesResponses[keyof TranslateSitesPostSitesResponses];

export type TranslateSitesDeleteSiteData = {
  body?: never;
  path: {
    /**
     * Site Id
     */
    site_id: string;
  };
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/translate/sites/{site_id}';
};

export type TranslateSitesDeleteSiteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TranslateSitesDeleteSiteError =
  TranslateSitesDeleteSiteErrors[keyof TranslateSitesDeleteSiteErrors];

export type TranslateSitesDeleteSiteResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type TranslateSitesDeleteSiteResponse =
  TranslateSitesDeleteSiteResponses[keyof TranslateSitesDeleteSiteResponses];

export type TranslateSitesGetSiteData = {
  body?: never;
  path: {
    /**
     * Site Id
     */
    site_id: string;
  };
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/translate/sites/{site_id}';
};

export type TranslateSitesGetSiteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TranslateSitesGetSiteError =
  TranslateSitesGetSiteErrors[keyof TranslateSitesGetSiteErrors];

export type TranslateSitesGetSiteResponses = {
  /**
   * Successful Response
   */
  200: Site;
};

export type TranslateSitesGetSiteResponse =
  TranslateSitesGetSiteResponses[keyof TranslateSitesGetSiteResponses];

export type TranslateSitesPutSiteData = {
  body: SiteCreate;
  path: {
    /**
     * Site Id
     */
    site_id: string;
  };
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/translate/sites/{site_id}';
};

export type TranslateSitesPutSiteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TranslateSitesPutSiteError =
  TranslateSitesPutSiteErrors[keyof TranslateSitesPutSiteErrors];

export type TranslateSitesPutSiteResponses = {
  /**
   * Successful Response
   */
  200: Site;
};

export type TranslateSitesPutSiteResponse =
  TranslateSitesPutSiteResponses[keyof TranslateSitesPutSiteResponses];

export type TranslateSitesPostToggleSiteData = {
  body?: never;
  path: {
    /**
     * Site Id
     */
    site_id: string;
  };
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/translate/sites/{site_id}/toggle';
};

export type TranslateSitesPostToggleSiteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TranslateSitesPostToggleSiteError =
  TranslateSitesPostToggleSiteErrors[keyof TranslateSitesPostToggleSiteErrors];

export type TranslateSitesPostToggleSiteResponses = {
  /**
   * Successful Response
   */
  200: Site;
};

export type TranslateSitesPostToggleSiteResponse =
  TranslateSitesPostToggleSiteResponses[keyof TranslateSitesPostToggleSiteResponses];

export type DummyTranslateDummyPostData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/translate/dummy';
};

export type DummyTranslateDummyPostResponses = {
  /**
   * Successful Response
   */
  200: Detail;
};

export type DummyTranslateDummyPostResponse =
  DummyTranslateDummyPostResponses[keyof DummyTranslateDummyPostResponses];

export type ConfigGetButtonData = {
  body?: never;
  path: {
    /**
     * Domain
     * Domain name to verify ownership
     */
    domain: string;
  };
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/config/{domain}/button';
};

export type ConfigGetButtonErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ConfigGetButtonError = ConfigGetButtonErrors[keyof ConfigGetButtonErrors];

export type ConfigGetButtonResponses = {
  /**
   * Successful Response
   */
  200: ButtonSettings;
};

export type ConfigGetButtonResponse = ConfigGetButtonResponses[keyof ConfigGetButtonResponses];

export type ConfigPutButtonData = {
  body: ButtonConfig;
  path: {
    /**
     * Domain
     * Domain name to verify ownership
     */
    domain: string;
  };
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/config/{domain}/button';
};

export type ConfigPutButtonErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ConfigPutButtonError = ConfigPutButtonErrors[keyof ConfigPutButtonErrors];

export type ConfigPutButtonResponses = {
  /**
   * Successful Response
   */
  200: ButtonSettings;
};

export type ConfigPutButtonResponse = ConfigPutButtonResponses[keyof ConfigPutButtonResponses];

export type ConfigGetDataSourcesData = {
  body?: never;
  path: {
    /**
     * Domain
     * Domain name to verify ownership
     */
    domain: string;
  };
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/config/{domain}/data_sources';
};

export type ConfigGetDataSourcesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ConfigGetDataSourcesError =
  ConfigGetDataSourcesErrors[keyof ConfigGetDataSourcesErrors];

export type ConfigGetDataSourcesResponses = {
  /**
   * Successful Response
   */
  200: DataSourcesSettings;
};

export type ConfigGetDataSourcesResponse =
  ConfigGetDataSourcesResponses[keyof ConfigGetDataSourcesResponses];

export type ConfigPutDataSourcesData = {
  body: DataSourcesConfig;
  path: {
    /**
     * Domain
     * Domain name to verify ownership
     */
    domain: string;
  };
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/config/{domain}/data_sources';
};

export type ConfigPutDataSourcesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ConfigPutDataSourcesError =
  ConfigPutDataSourcesErrors[keyof ConfigPutDataSourcesErrors];

export type ConfigPutDataSourcesResponses = {
  /**
   * Successful Response
   */
  200: DataSourcesSettings;
};

export type ConfigPutDataSourcesResponse =
  ConfigPutDataSourcesResponses[keyof ConfigPutDataSourcesResponses];

export type GetProfilesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/simplify/profiles';
};

export type GetProfilesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetProfilesError = GetProfilesErrors[keyof GetProfilesErrors];

export type GetProfilesResponses = {
  /**
   * Response Get Profiles
   * Successful Response
   */
  200: Array<Profile>;
};

export type GetProfilesResponse = GetProfilesResponses[keyof GetProfilesResponses];

export type PostProfileData = {
  body: ProfileIn;
  path?: never;
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/simplify/profiles';
};

export type PostProfileErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type PostProfileError = PostProfileErrors[keyof PostProfileErrors];

export type PostProfileResponses = {
  /**
   * Successful Response
   */
  200: Profile;
};

export type PostProfileResponse = PostProfileResponses[keyof PostProfileResponses];

export type DeleteProfileData = {
  body?: never;
  path: {
    /**
     * Name
     */
    name: string;
  };
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/simplify/profiles/{name}';
};

export type DeleteProfileErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteProfileError = DeleteProfileErrors[keyof DeleteProfileErrors];

export type DeleteProfileResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteProfileResponse = DeleteProfileResponses[keyof DeleteProfileResponses];

export type GetProfileData = {
  body?: never;
  path: {
    /**
     * Name
     */
    name: string;
  };
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/simplify/profiles/{name}';
};

export type GetProfileErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetProfileError = GetProfileErrors[keyof GetProfileErrors];

export type GetProfileResponses = {
  /**
   * Response Get Profile
   * Successful Response
   */
  200: Profile | null;
};

export type GetProfileResponse = GetProfileResponses[keyof GetProfileResponses];

export type PutProfileData = {
  body: ProfileIn;
  path: {
    /**
     * Name
     */
    name: string;
  };
  query?: {
    /**
     * Id Token
     */
    id_token?: string | null;
  };
  url: '/simplify/profiles/{name}';
};

export type PutProfileErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type PutProfileError = PutProfileErrors[keyof PutProfileErrors];

export type PutProfileResponses = {
  /**
   * Response Put Profile
   * Successful Response
   */
  200: Profile | null;
};

export type PutProfileResponse = PutProfileResponses[keyof PutProfileResponses];

export type GetWebsiteOverridesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/simplify/website_overrides';
};

export type GetWebsiteOverridesResponses = {
  /**
   * Response Get Website Overrides
   * Successful Response
   */
  200: Array<WebsiteOverride>;
};

export type GetWebsiteOverridesResponse =
  GetWebsiteOverridesResponses[keyof GetWebsiteOverridesResponses];

export type PostWebsiteOverrideData = {
  body: WebsiteOverrideCreate;
  path?: never;
  query?: never;
  url: '/simplify/website_overrides';
};

export type PostWebsiteOverrideErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type PostWebsiteOverrideError = PostWebsiteOverrideErrors[keyof PostWebsiteOverrideErrors];

export type PostWebsiteOverrideResponses = {
  /**
   * Successful Response
   */
  200: WebsiteOverride;
};

export type PostWebsiteOverrideResponse =
  PostWebsiteOverrideResponses[keyof PostWebsiteOverrideResponses];

export type DeleteWebsiteOverrideData = {
  body?: never;
  path: {
    /**
     * Domain
     */
    domain: string;
  };
  query?: never;
  url: '/simplify/website_overrides/{domain}';
};

export type DeleteWebsiteOverrideErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteWebsiteOverrideError =
  DeleteWebsiteOverrideErrors[keyof DeleteWebsiteOverrideErrors];

export type DeleteWebsiteOverrideResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteWebsiteOverrideResponse =
  DeleteWebsiteOverrideResponses[keyof DeleteWebsiteOverrideResponses];

export type GetWebsiteOverrideData = {
  body?: never;
  path: {
    /**
     * Domain
     */
    domain: string;
  };
  query?: never;
  url: '/simplify/website_overrides/{domain}';
};

export type GetWebsiteOverrideErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetWebsiteOverrideError = GetWebsiteOverrideErrors[keyof GetWebsiteOverrideErrors];

export type GetWebsiteOverrideResponses = {
  /**
   * Response Get Website Override
   * Successful Response
   */
  200: WebsiteOverride | null;
};

export type GetWebsiteOverrideResponse =
  GetWebsiteOverrideResponses[keyof GetWebsiteOverrideResponses];

export type PutWebsiteOverrideData = {
  body: WebsiteOverrideCreate;
  path: {
    /**
     * Domain
     */
    domain: string;
  };
  query?: never;
  url: '/simplify/website_overrides/{domain}';
};

export type PutWebsiteOverrideErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type PutWebsiteOverrideError = PutWebsiteOverrideErrors[keyof PutWebsiteOverrideErrors];

export type PutWebsiteOverrideResponses = {
  /**
   * Response Put Website Override
   * Successful Response
   */
  200: WebsiteOverride | null;
};

export type PutWebsiteOverrideResponse =
  PutWebsiteOverrideResponses[keyof PutWebsiteOverrideResponses];

export type ChatPostChatPublicData = {
  body: ChatRequest;
  path?: never;
  query?: never;
  url: '/simplify/chat/public';
};

export type ChatPostChatPublicErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ChatPostChatPublicError = ChatPostChatPublicErrors[keyof ChatPostChatPublicErrors];

export type ChatPostChatPublicResponses = {
  /**
   * Successful Response
   */
  200: ChatResponse;
};

export type ChatPostChatPublicResponse =
  ChatPostChatPublicResponses[keyof ChatPostChatPublicResponses];

export type ClientOptions = {
  baseURL: `${string}://${string}/api` | (string & {});
};
