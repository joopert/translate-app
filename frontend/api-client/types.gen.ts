// This file is auto-generated by @hey-api/openapi-ts

export type ChangePassword = {
  old_password: string;
  new_password: string;
};

export type ConfirmForgotPassword = {
  email: string;
  confirmation_code: string;
  new_password: string;
};

export type ConfirmSignUp = {
  email: string;
  confirmation_code: string;
};

export type CurrentUser = {
  id: string;
  username: string;
  email: string;
  email_is_verified?: boolean | null;
  groups?: Array<string>;
  picture?: string | null;
  first_name?: string | null;
  last_name?: string | null;
  phone_number?: string | null;
  phone_number_is_verified?: boolean | null;
};

export type Detail = {
  loc: Array<ErrorLocation | string> | ErrorLocationField;
  msg: string;
  code: string;
};

export type ErrorLocation = 'body' | 'query' | 'header' | 'cookies' | 'params';

export type ErrorLocationField = 'general';

export type ForgotPassword = {
  email: string;
};

export type HttpValidationError = {
  detail?: Array<ValidationError>;
};

export type OAuthUrl = {
  url: string;
};

/**
 * Plan model.
 */
export type Plan = {
  id: string;
  name: string;
  description?: string | null;
};

/**
 * Collection of plans.
 */
export type Plans = {
  items: Array<Plan>;
};

export type ResponseFormat = {
  code: string;
  msg: string;
};

export type SignIn = {
  username: string;
  password: string;
};

export type SignUp = {
  email: string;
  password: string;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type AuthGetSignInGoogleData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * URL to redirect to after successful authentication
     */
    redirect?: string | null;
  };
  url: '/auth/sign-in/google';
};

export type AuthGetSignInGoogleErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthGetSignInGoogleError = AuthGetSignInGoogleErrors[keyof AuthGetSignInGoogleErrors];

export type AuthGetSignInGoogleResponses = {
  /**
   * Successful Response
   */
  200: OAuthUrl;
};

export type AuthGetSignInGoogleResponse =
  AuthGetSignInGoogleResponses[keyof AuthGetSignInGoogleResponses];

export type AuthCallbackAuthCallbackGetData = {
  body?: never;
  path?: never;
  query: {
    code: string;
    state: string;
  };
  url: '/auth/callback';
};

export type AuthCallbackAuthCallbackGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthCallbackAuthCallbackGetError =
  AuthCallbackAuthCallbackGetErrors[keyof AuthCallbackAuthCallbackGetErrors];

export type AuthCallbackAuthCallbackGetResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type AuthPostSignUpData = {
  body: SignUp;
  path?: never;
  query?: never;
  url: '/auth/sign-up';
};

export type AuthPostSignUpErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthPostSignUpError = AuthPostSignUpErrors[keyof AuthPostSignUpErrors];

export type AuthPostSignUpResponses = {
  /**
   * Successful Response
   */
  200: ResponseFormat;
};

export type AuthPostSignUpResponse = AuthPostSignUpResponses[keyof AuthPostSignUpResponses];

export type AuthPostConfirmSignUpData = {
  body: ConfirmSignUp;
  path?: never;
  query?: never;
  url: '/auth/confirm-sign-up';
};

export type AuthPostConfirmSignUpErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthPostConfirmSignUpError =
  AuthPostConfirmSignUpErrors[keyof AuthPostConfirmSignUpErrors];

export type AuthPostConfirmSignUpResponses = {
  /**
   * Successful Response
   */
  200: ResponseFormat;
};

export type AuthPostConfirmSignUpResponse =
  AuthPostConfirmSignUpResponses[keyof AuthPostConfirmSignUpResponses];

export type AuthPostForgotPasswordData = {
  body: ForgotPassword;
  path?: never;
  query?: never;
  url: '/auth/forgot-password';
};

export type AuthPostForgotPasswordErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthPostForgotPasswordError =
  AuthPostForgotPasswordErrors[keyof AuthPostForgotPasswordErrors];

export type AuthPostForgotPasswordResponses = {
  /**
   * Successful Response
   */
  200: ResponseFormat;
};

export type AuthPostForgotPasswordResponse =
  AuthPostForgotPasswordResponses[keyof AuthPostForgotPasswordResponses];

export type AuthPostConfirmForgotPasswordData = {
  body: ConfirmForgotPassword;
  path?: never;
  query?: never;
  url: '/auth/confirm-forgot-password';
};

export type AuthPostConfirmForgotPasswordErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthPostConfirmForgotPasswordError =
  AuthPostConfirmForgotPasswordErrors[keyof AuthPostConfirmForgotPasswordErrors];

export type AuthPostConfirmForgotPasswordResponses = {
  /**
   * Successful Response
   */
  200: ResponseFormat;
};

export type AuthPostConfirmForgotPasswordResponse =
  AuthPostConfirmForgotPasswordResponses[keyof AuthPostConfirmForgotPasswordResponses];

export type AuthPostChangePasswordData = {
  body: ChangePassword;
  path?: never;
  query?: never;
  url: '/auth/change-password';
};

export type AuthPostChangePasswordErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthPostChangePasswordError =
  AuthPostChangePasswordErrors[keyof AuthPostChangePasswordErrors];

export type AuthPostChangePasswordResponses = {
  /**
   * Successful Response
   */
  200: ResponseFormat;
};

export type AuthPostChangePasswordResponse =
  AuthPostChangePasswordResponses[keyof AuthPostChangePasswordResponses];

export type AuthPostSetInitialPasswordData = {
  body?: never;
  path?: never;
  query: {
    username: string;
    old_password: string;
    new_password: string;
  };
  url: '/auth/set-initial-password';
};

export type AuthPostSetInitialPasswordErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthPostSetInitialPasswordError =
  AuthPostSetInitialPasswordErrors[keyof AuthPostSetInitialPasswordErrors];

export type AuthPostSetInitialPasswordResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type AuthGetMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/me';
};

export type AuthGetMeResponses = {
  /**
   * Successful Response
   */
  200: CurrentUser | Detail;
};

export type AuthGetMeResponse = AuthGetMeResponses[keyof AuthGetMeResponses];

export type AuthPostSignInData = {
  body: SignIn;
  path?: never;
  query?: never;
  url: '/auth/sign-in';
};

export type AuthPostSignInErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthPostSignInError = AuthPostSignInErrors[keyof AuthPostSignInErrors];

export type AuthPostSignInResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type AuthPostRefreshData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/refresh';
};

export type AuthPostRefreshResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type AuthPostLogoutSessionData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/logout/session';
};

export type AuthPostLogoutSessionResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type AuthPostLogoutAllDevicesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/logout/all-devices';
};

export type AuthPostLogoutAllDevicesResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type AuthGetProtectedData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/protected';
};

export type AuthGetProtectedResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type PolarWebhookPaymentsWebhookPostData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/payments/webhook';
};

export type PolarWebhookPaymentsWebhookPostResponses = {
  /**
   * Successful Response
   */
  200: {
    [key: string]: unknown;
  };
};

export type PolarWebhookPaymentsWebhookPostResponse =
  PolarWebhookPaymentsWebhookPostResponses[keyof PolarWebhookPaymentsWebhookPostResponses];

export type PaymentsGetPlansData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/payments/plans';
};

export type PaymentsGetPlansResponses = {
  /**
   * Successful Response
   */
  200: Plans;
};

export type PaymentsGetPlansResponse = PaymentsGetPlansResponses[keyof PaymentsGetPlansResponses];

export type PaymentsGetPlansRefreshData = {
  body?: never;
  path?: never;
  query?: {
    force?: boolean;
  };
  url: '/payments/plans/refresh';
};

export type PaymentsGetPlansRefreshErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type PaymentsGetPlansRefreshError =
  PaymentsGetPlansRefreshErrors[keyof PaymentsGetPlansRefreshErrors];

export type PaymentsGetPlansRefreshResponses = {
  /**
   * Successful Response
   */
  200: Plans;
};

export type PaymentsGetPlansRefreshResponse =
  PaymentsGetPlansRefreshResponses[keyof PaymentsGetPlansRefreshResponses];

export type PaymentsGetPlanData = {
  body?: never;
  path: {
    plan_id: string;
  };
  query?: never;
  url: '/payments/plans/{plan_id}';
};

export type PaymentsGetPlanErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type PaymentsGetPlanError = PaymentsGetPlanErrors[keyof PaymentsGetPlanErrors];

export type PaymentsGetPlanResponses = {
  /**
   * Successful Response
   */
  200: Plan;
};

export type PaymentsGetPlanResponse = PaymentsGetPlanResponses[keyof PaymentsGetPlanResponses];

export type ClientOptions = {
  baseURL: `${string}://${string}/api/v1` | 'http://localhost:8001' | (string & {});
};
